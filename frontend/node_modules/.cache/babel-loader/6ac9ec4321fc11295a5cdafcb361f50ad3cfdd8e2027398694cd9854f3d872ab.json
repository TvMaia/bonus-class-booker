{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Documents\\\\coding\\\\bonus-class-booker\\\\frontend\\\\src\\\\components\\\\AvailableSlots.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getAvailableSlots } from '../services/apiService';\nimport BookingForm from './BookingForm';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AvailableSlots = ({\n  modality\n}) => {\n  _s();\n  const [slots, setSlots] = useState([]);\n  const [selectedHorario, setSelectedHorario] = useState('');\n  useEffect(() => {\n    const fetchSlots = async () => {\n      try {\n        const response = await getAvailableSlots(modality);\n        setSlots(response.data);\n      } catch (error) {\n        toast.error('Erro ao carregar horários');\n      }\n    };\n    if (modality) fetchSlots();\n  }, [modality]);\n  const handleSelectChange = e => {\n    setSelectedHorario(e.target.value);\n  };\n  const handleBookingSuccess = () => {\n    setSelectedHorario('');\n    const fetchSlots = async () => {\n      try {\n        const response = await getAvailableSlots(modality);\n        setSlots(response.data);\n      } catch (error) {\n        toast.error('Erro ao recarregar horários');\n      }\n    };\n    fetchSlots();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"available-slots\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Hor\\xE1rios Dispon\\xEDveis (\", modality, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), slots.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Nenhum hor\\xE1rio dispon\\xEDvel para a modalidade selecionada.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleSelectChange,\n      value: selectedHorario,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        disabled: true,\n        children: \"Escolha um hor\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), slots.map((horario, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: horario,\n        children: horario\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), selectedHorario && /*#__PURE__*/_jsxDEV(BookingForm, {\n      horario: selectedHorario,\n      modality: modality,\n      onBookingSuccess: handleBookingSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(AvailableSlots, \"FlvP7GXvqcwr80XnIqAplpmPtys=\");\n_c = AvailableSlots;\nexport default AvailableSlots;\nvar _c;\n$RefreshReg$(_c, \"AvailableSlots\");","map":{"version":3,"names":["React","useState","useEffect","getAvailableSlots","BookingForm","toast","jsxDEV","_jsxDEV","AvailableSlots","modality","_s","slots","setSlots","selectedHorario","setSelectedHorario","fetchSlots","response","data","error","handleSelectChange","e","target","value","handleBookingSuccess","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onChange","disabled","map","horario","index","onBookingSuccess","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/Documents/coding/bonus-class-booker/frontend/src/components/AvailableSlots.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getAvailableSlots } from '../services/apiService';\r\nimport BookingForm from './BookingForm';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst AvailableSlots = ({ modality }) => {\r\n  const [slots, setSlots] = useState([]);\r\n  const [selectedHorario, setSelectedHorario] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchSlots = async () => {\r\n      try {\r\n        const response = await getAvailableSlots(modality);\r\n        setSlots(response.data);\r\n      } catch (error) {\r\n        toast.error('Erro ao carregar horários');\r\n      }\r\n    };\r\n    if (modality) fetchSlots();\r\n  }, [modality]);\r\n\r\n  const handleSelectChange = (e) => {\r\n    setSelectedHorario(e.target.value);\r\n  };\r\n\r\n  const handleBookingSuccess = () => {\r\n    setSelectedHorario('');\r\n    const fetchSlots = async () => {\r\n      try {\r\n        const response = await getAvailableSlots(modality);\r\n        setSlots(response.data);\r\n      } catch (error) {\r\n        toast.error('Erro ao recarregar horários');\r\n      }\r\n    };\r\n    fetchSlots();\r\n  };\r\n\r\n  return (\r\n    <div className=\"available-slots\">\r\n      <h2>Horários Disponíveis ({modality})</h2>\r\n      {slots.length === 0 ? (\r\n        <p>Nenhum horário disponível para a modalidade selecionada.</p>\r\n      ) : (\r\n        <select onChange={handleSelectChange} value={selectedHorario}>\r\n          <option value=\"\" disabled>Escolha um horário</option>\r\n          {slots.map((horario, index) => (\r\n            <option key={index} value={horario}>\r\n              {horario}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      )}\r\n      {selectedHorario && (\r\n        <BookingForm\r\n          horario={selectedHorario}\r\n          modality={modality}\r\n          onBookingSuccess={handleBookingSuccess}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AvailableSlots;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}