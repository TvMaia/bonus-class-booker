{"ast":null,"code":"var _s = $RefreshSig$();\nconst express = require('express');\nconst {\n  GoogleSpreadsheet\n} = require('google-spreadsheet');\nconst cors = require('cors');\nconst app = express();\napp.use(cors());\napp.use(express.json());\nconst doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID);\nasync function accessSpreadsheet() {\n  _s();\n  await doc.useServiceAccountAuth({\n    client_email: process.env.GOOGLE_SHEET_CLIENT_EMAIL,\n    private_key: process.env.GOOGLE_SHEET_PRIVATE_KEY.replace(/\\\\n/g, '\\n')\n  });\n  await doc.loadInfo();\n}\n_s(accessSpreadsheet, \"XzZzjmf42T4ghIIVsLcPZIIQRXQ=\", false, function () {\n  return [doc.useServiceAccountAuth];\n});\naccessSpreadsheet();\napp.get('/bonus-class/available', async (req, res) => {\n  try {\n    const modality = req.query.modality;\n    const sheet = doc.sheetsByIndex[0];\n    await sheet.loadCells('A1:D100');\n    const rows = await sheet.getRows();\n    const availableSlots = rows.filter(row => {\n      var _row$get, _row$get2;\n      const booked = ((_row$get = row.get('booked')) === null || _row$get === void 0 ? void 0 : _row$get.toLowerCase()) === 'yes';\n      const slotModality = (_row$get2 = row.get('modalidade')) === null || _row$get2 === void 0 ? void 0 : _row$get2.toUpperCase();\n      return !booked && (slotModality === '' || slotModality === modality.toUpperCase().charAt(0) || modality === 'online' && slotModality === 'O' || modality === 'presencial' && slotModality === 'P');\n    }).map(row => row.get('horario'));\n    res.json(availableSlots);\n  } catch (error) {\n    console.error('Error fetching available slots:', error);\n    res.status(500).json({\n      error: 'Failed to fetch available slots'\n    });\n  }\n});\napp.post('/bonus-class/book', async (req, res) => {\n  try {\n    var _row$get3, _row$get4;\n    const {\n      horario,\n      modality,\n      studentName,\n      book,\n      content,\n      whatsapp\n    } = req.body;\n    const sheet = doc.sheetsByIndex[0];\n    await sheet.loadCells('A1:D100');\n    const rows = await sheet.getRows();\n    const row = rows.find(r => r.get('horario') === horario);\n    if (!row || ((_row$get3 = row.get('booked')) === null || _row$get3 === void 0 ? void 0 : _row$get3.toLowerCase()) === 'yes') {\n      return res.status(400).json({\n        error: 'Slot not available'\n      });\n    }\n\n    // Se a modalidade estiver em branco, preenchê-la com a escolha do aluno\n    const slotModality = (_row$get4 = row.get('modalidade')) === null || _row$get4 === void 0 ? void 0 : _row$get4.toUpperCase();\n    if (!slotModality || slotModality === '') {\n      row.set('modalidade', modality === 'online' ? 'O' : 'P');\n    }\n\n    // Registrar o agendamento\n    row.set('booked', 'yes');\n    row.set('studentName', studentName);\n    row.set('book', book);\n    row.set('content', content);\n    row.set('whatsapp', whatsapp);\n    await row.save();\n    res.json({\n      message: 'Booking successful'\n    });\n  } catch (error) {\n    console.error('Error booking slot:', error);\n    res.status(500).json({\n      error: 'Failed to book slot'\n    });\n  }\n});\nmodule.exports = app;","map":{"version":3,"names":["express","require","GoogleSpreadsheet","cors","app","use","json","doc","process","env","GOOGLE_SHEET_ID","accessSpreadsheet","_s","useServiceAccountAuth","client_email","GOOGLE_SHEET_CLIENT_EMAIL","private_key","GOOGLE_SHEET_PRIVATE_KEY","replace","loadInfo","get","req","res","modality","query","sheet","sheetsByIndex","loadCells","rows","getRows","availableSlots","filter","row","_row$get","_row$get2","booked","toLowerCase","slotModality","toUpperCase","charAt","map","error","console","status","post","_row$get3","_row$get4","horario","studentName","book","content","whatsapp","body","find","r","set","save","message","module","exports"],"sources":["C:/Users/Usuario/Documents/coding/bonus-class-booker/frontend/src/App.js"],"sourcesContent":["const express = require('express');\r\nconst { GoogleSpreadsheet } = require('google-spreadsheet');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nconst doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID);\r\n\r\nasync function accessSpreadsheet() {\r\n  await doc.useServiceAccountAuth({\r\n    client_email: process.env.GOOGLE_SHEET_CLIENT_EMAIL,\r\n    private_key: process.env.GOOGLE_SHEET_PRIVATE_KEY.replace(/\\\\n/g, '\\n'),\r\n  });\r\n  await doc.loadInfo();\r\n}\r\n\r\naccessSpreadsheet();\r\n\r\napp.get('/bonus-class/available', async (req, res) => {\r\n  try {\r\n    const modality = req.query.modality;\r\n    const sheet = doc.sheetsByIndex[0];\r\n    await sheet.loadCells('A1:D100');\r\n    const rows = await sheet.getRows();\r\n\r\n    const availableSlots = rows\r\n      .filter((row) => {\r\n        const booked = row.get('booked')?.toLowerCase() === 'yes';\r\n        const slotModality = row.get('modalidade')?.toUpperCase();\r\n        return (\r\n          !booked &&\r\n          (slotModality === '' ||\r\n           slotModality === modality.toUpperCase().charAt(0) ||\r\n           (modality === 'online' && slotModality === 'O') ||\r\n           (modality === 'presencial' && slotModality === 'P'))\r\n        );\r\n      })\r\n      .map((row) => row.get('horario'));\r\n\r\n    res.json(availableSlots);\r\n  } catch (error) {\r\n    console.error('Error fetching available slots:', error);\r\n    res.status(500).json({ error: 'Failed to fetch available slots' });\r\n  }\r\n});\r\n\r\napp.post('/bonus-class/book', async (req, res) => {\r\n  try {\r\n    const { horario, modality, studentName, book, content, whatsapp } = req.body;\r\n    const sheet = doc.sheetsByIndex[0];\r\n    await sheet.loadCells('A1:D100');\r\n    const rows = await sheet.getRows();\r\n\r\n    const row = rows.find((r) => r.get('horario') === horario);\r\n    if (!row || row.get('booked')?.toLowerCase() === 'yes') {\r\n      return res.status(400).json({ error: 'Slot not available' });\r\n    }\r\n\r\n    // Se a modalidade estiver em branco, preenchê-la com a escolha do aluno\r\n    const slotModality = row.get('modalidade')?.toUpperCase();\r\n    if (!slotModality || slotModality === '') {\r\n      row.set('modalidade', modality === 'online' ? 'O' : 'P');\r\n    }\r\n\r\n    // Registrar o agendamento\r\n    row.set('booked', 'yes');\r\n    row.set('studentName', studentName);\r\n    row.set('book', book);\r\n    row.set('content', content);\r\n    row.set('whatsapp', whatsapp);\r\n    await row.save();\r\n\r\n    res.json({ message: 'Booking successful' });\r\n  } catch (error) {\r\n    console.error('Error booking slot:', error);\r\n    res.status(500).json({ error: 'Failed to book slot' });\r\n  }\r\n});\r\n\r\nmodule.exports = app;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}